#include "telescope.h"
/////////////////////////////////////////////////////////////////////////////////////
Telescope::Telescope(QSettings *s) :
    _settings(s)
{
    loadSettings(s);
    connect(&_socket, SIGNAL(readyRead()),
            this, SLOT(read()),
            Qt::AutoConnection);
    if(! _socket.bind(QHostAddress::LocalHost, _port))
        qDebug() << "bind failed";
}
/////////////////////////////////////////////////////////////////////////////////////
Telescope::~Telescope()
{
    saveSettings(_settings);
}
/////////////////////////////////////////////////////////////////////////////////////
void Telescope::loadSettings(QSettings *s)
{
    _port = s->value(__skeyUdpServerPort, _defaultPort).toInt();
}
/////////////////////////////////////////////////////////////////////////////////////
void Telescope::saveSettings(QSettings *s)
{
    s->setValue(__skeyUdpServerPort, _port);
}
/////////////////////////////////////////////////////////////////////////////////////
void Telescope::read()
{
    if(_socket.pendingDatagramSize() == sizeof(TelPos))
    {
        if(_telescope.lock().tryLockForWrite(_timeout))
        {
            _socket.readDatagram((char*)(&(_telescope.data())),
                                  sizeof(TelPos));
            QDateTime t;
            timeutils::winfiletime2qdatetime(_telescope.data().timeUTC, t);
            _telescope.setTimeMarker(t);
            _telescope.lock().unlock();
            emit sendTelPos(&_telescope);
        }
    }
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
