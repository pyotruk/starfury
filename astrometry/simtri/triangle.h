#ifndef TRIANGLE_H
#define TRIANGLE_H
/////////////////////////////////////////////////////////////////////////////////////
/* Модуль для отождествления звёздных конфигураций
   методом подобных треугольников.
   Основная функция: simtri::equate(...) */
/////////////////////////////////////////////////////////////////////////////////////
#include <QVector>
#include <QPointF>
#include <QtAlgorithms>
#include "qmath.h"
/////////////////////////////////////////////////////////////////////////////////////
#include "boxes/artifact.h"
#include "math/astrocalc.h"
#include "astrometry/simtri/combo.h"
#include "astrometry/astrometry.h"
/////////////////////////////////////////////////////////////////////////////////////
typedef Artifact Triangle[3];
/////////////////////////////////////////////////////////////////////////////////////
class ArtifactTriangle  //вспомогательный класс
{
public:
    explicit ArtifactTriangle() {}
    explicit ArtifactTriangle(const Artifact &a,
                              const Artifact &b,
                              const Artifact &c)
    {_t[0] = a;  _t[1] = b;  _t[2] = c;}
    const Triangle& t() const {return _t;}
private:
    Triangle _t;
};
/////////////////////////////////////////////////////////////////////////////////////
typedef QVector<ArtifactTriangle> TriangleVector;
/////////////////////////////////////////////////////////////////////////////////////
typedef int SimPath[3]; //путь подобия (соответствие сторон треугольников)
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
namespace simtri
{
static const double _equalEps = 2.0;
static const int    _maxStarQuantityForSimtriMethod = 8;
//
int equate(ArtifactVector &picStars,
           ArtifactVector &catStars,
           const double    similarEps,
           const int       minEquatedStarQuantity);
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
#endif // ARTTRIANGLE_H
