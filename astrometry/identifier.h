#ifndef IDENTIFIER_H
#define IDENTIFIER_H
/////////////////////////////////////////////////////////////////////////////////////
#include <QtAlgorithms>
#include <QVector>
/////////////////////////////////////////////////////////////////////////////////////
#include "boxes/artifact.h"
#include "math/astrocalc.h"
/////////////////////////////////////////////////////////////////////////////////////
class StarPair
{
public:
    explicit StarPair();
    explicit StarPair(const Artifact &refStar,
                      const Artifact &anyStar);
    bool operator ==(const StarPair &other) const {return this->_dist == other._dist;}
    bool operator !=(const StarPair &other) const {return this->_dist != other._dist;}
    bool operator <(const StarPair &other)  const {return this->_dist <  other._dist;}
    const Artifact& anyStar() const {return _any;}
    const Artifact& refStar() const {return _ref;}
    double dist() const {return _dist;}
private:
    Artifact _ref;
    Artifact _any;
    double   _dist;
};
/////////////////////////////////////////////////////////////////////////////////////
typedef QVector<StarPair> DistVector;
/////////////////////////////////////////////////////////////////////////////////////
namespace id
{
void equate(const ArtifactVector &picStars,
            const ArtifactVector &catStars,
            const double eps,
            ArtifactVector &eqPicStars,
            ArtifactVector &eqCatStars);
}
/////////////////////////////////////////////////////////////////////////////////////
typedef QVector<double> QVector_double;
typedef QVector<int>    QVector_int;
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
#endif // IDENTIFIER_H
