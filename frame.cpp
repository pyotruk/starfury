#include "frame.h"
/////////////////////////////////////////////////////////////////////////////////////
Frame::Frame() :
    _data(new uchar[0])
{
}
/////////////////////////////////////////////////////////////////////////////////////
Frame::Frame(const Frame &f)
{
    this->_header = f._header;
    _data = new uchar[_header.dataSize];
    memcpy(this->_data, f._data, this->_header.dataSize);
}
/////////////////////////////////////////////////////////////////////////////////////
Frame& Frame::operator =(const Frame &f)
{
    if(this != &f)
    {
        this->_header = f._header;
        delete []_data;
        _data = new uchar[_header.dataSize];
        memcpy(this->_data, f._data, this->_header.dataSize);
    }
    return *this;
}
/////////////////////////////////////////////////////////////////////////////////////
Frame::~Frame()
{
    delete []_data;
}
/////////////////////////////////////////////////////////////////////////////////////
void Frame::attachRawData(const FrameHeader &header,
                          const void *data)
{
    _header = header;
    delete []_data;
    _data = (uchar*)data;
}
/////////////////////////////////////////////////////////////////////////////////////
void Frame::unattachRawData()
{
    _data = 0;
}
/////////////////////////////////////////////////////////////////////////////////////
void Frame::lock()
{
    _locked = true;
}
/////////////////////////////////////////////////////////////////////////////////////
void Frame::unlock()
{
    _locked = false;
}
/////////////////////////////////////////////////////////////////////////////////////
bool Frame::isLocked()
{
    return _locked;
}
/////////////////////////////////////////////////////////////////////////////////////
uchar* Frame::data()
{
    return _data;
}
/////////////////////////////////////////////////////////////////////////////////////
const FrameHeader& Frame::header()
{
    return _header;
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
